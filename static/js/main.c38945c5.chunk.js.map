{"version":3,"sources":["logo.svg","components/pregame.jsx","components/postgame.jsx","components/game.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","PreGame","React","Component","PostGame","Game","baseURL","state","status","currentQuestion","question_status","reading_timer","thinking_timer","waiting_timer","setInterval","a","url","fetch","res","json","jsonres","console","log","setState","url2","res2","jsonres2","document","getElementById","src","Audio","play","e","this","className","id","style","display","marginLeft","marginRight","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,uKCEtBC,E,uKAGb,OACI,6BACI,4D,GALqBC,IAAMC,WCAtBC,E,uKAGb,OACI,6BACI,kDACA,iDACA,+BACI,+BACI,4BACI,wCACA,oCACA,oCACA,oCACA,oCACA,oCACA,oCACA,yCAGR,+BACI,4BACI,0CACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,qCAEJ,4BACI,2CACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,qCAEJ,4BACI,4CACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,qCAEJ,4BACI,wCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,2C,GA3DUF,IAAMC,WCEvBE,E,4MAEjBC,QAAU,iC,EAEVC,MAAQ,CACJC,OAAQ,cACRC,iBAAkB,EAClBC,gBAAkB,OAClBC,eAAmB,EACnBC,gBAAmB,EACnBC,eAAmB,G,uLAInB,IACIC,YAAW,sBAAC,sCAAAC,EAAA,6DACFC,EAAM,EAAKV,QAAU,cADnB,SAEUW,MAAMD,GAFhB,cAEFE,EAFE,gBAGcA,EAAIC,OAHlB,UAGFC,EAHE,OAIRC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACVf,OAAkBY,EAAO,SAGJ,YAAtBA,EAAO,OAVF,oBAYDA,EAAO,mBAAyB,EAAKb,MAAME,gBAZ1C,wBAaMe,EAAO,EAAKlB,QAAU,gBAb5B,UAemBW,MAAMO,GAfzB,eAeMC,EAfN,iBAiBuBA,EAAKN,OAjB5B,QAiBMO,EAjBN,OAkBWC,SAASC,eAAe,MAChCC,IAAMH,EAAQ,GAML,IAAII,MAAMJ,EAAQ,OACxBK,OA1BN,QA8BJ,EAAKR,SAAS,CACVf,OAAkBY,EAAO,OACzBX,gBAAkBW,EAAO,iBACzBV,gBAAkBU,EAAO,gBACzBT,cAAkBS,EAAO,cACzBR,eAAkBQ,EAAO,eACzBP,cAAkBO,EAAO,gBApCzB,4CAyCT,KACL,MAAMY,GACJX,QAAQC,IAAIU,G,gIAIhB,MAAyB,gBAAtBC,KAAK1B,MAAMC,OAEN,kBAAC,EAAD,MAGiB,aAAtByB,KAAK1B,MAAMC,OAEN,kBAAC,EAAD,MAIiB,YAAtByB,KAAK1B,MAAMC,OAEN,6BACI,4BAAKyB,KAAK1B,MAAMC,QAChB,wCAAcyB,KAAK1B,MAAME,iBACzB,6BACI,2BAAOyB,UAAU,iBACb,4BAAQC,GAAG,cAAcN,IAAI,OAGrC,oDACA,6BACI,yBAAKA,IAAI,GAAGM,GAAG,KAAKC,MAAO,CACvBC,QAAS,QACTC,WAAY,OACZC,YAAa,OACbC,MAAM,UAGd,yBAAKH,QAAwC,YAA/BJ,KAAK1B,MAAMG,iBAAzB,YACcuB,KAAK1B,MAAMI,eAGzB,yBAAK0B,QAAwC,aAA/BJ,KAAK1B,MAAMG,iBAAzB,aACeuB,KAAK1B,MAAMK,gBAG1B,yBAAKyB,QAAwC,wBAA/BJ,KAAK1B,MAAMG,iBAAzB,sBACwBuB,KAAK1B,MAAMM,qBA5B/C,M,GAzE0BX,IAAMC,WCYzBsC,MAVf,WAGE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCCcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASC,eAAe,SDyHpB,kBAAmBsB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.c38945c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nexport default class PreGame extends React.Component{\n\n    render(){\n        return (\n            <div>\n                <h1>Game Hasn't Started Yet</h1>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default class PostGame extends React.Component{\n\n    render(){\n        return (\n            <div>\n                <h1>Jocul s-a incheiat</h1>\n                <h4>Clasament final: </h4>\n                <table>\n                    <thead>\n                        <tr>\n                            <th> Echipa </th>\n                            <th> R1 </th>\n                            <th> R2 </th>\n                            <th> R3 </th>\n                            <th> R4 </th>\n                            <th> R5 </th>\n                            <th> R6 </th>\n                            <th> Total </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td> Pulambec </td>\n                            <td> 6 </td>\n                            <td> 7 </td>\n                            <td> 6 </td>\n                            <td> 4 </td>\n                            <td> 3 </td>\n                            <td> 8 </td>\n                            <td> 69 </td>\n                        </tr>\n                        <tr>\n                            <td> Poponarii </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 69 </td>\n                        </tr>\n                        <tr>\n                            <td> Cacaciosii </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 6 </td>\n                            <td> 9 </td>\n                            <td> 69 </td>\n                        </tr>\n                        <tr>\n                            <td> LAREME </td>\n                            <td> 1 </td>\n                            <td> 0 </td>\n                            <td> 1 </td>\n                            <td> 0 </td>\n                            <td> 0 </td>\n                            <td> 1 </td>\n                            <td> 3 </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from 'react'\nimport PreGame from './pregame';\nimport PostGame from './postgame'\n\nexport default class Game extends React.Component{\n\n    baseURL = \"https://cupa-phi.herokuapp.com\"\n    // baseURL = \"http://127.0.0.1:5000\"\n    state = {\n        status: 'not_started',\n        currentQuestion: -1,\n        question_status : 'None',\n        reading_timer   : -1,\n        thinking_timer  : -1,\n        waiting_timer   : -1,\n    }\n\n    async componentDidMount(){\n        try {\n            setInterval(async () => {\n                const url = this.baseURL + \"/get_status\"; \n                const res = await fetch(url)\n                const jsonres = await res.json()\n                console.log(jsonres)\n\n                this.setState({\n                    status          : jsonres['status'],\n                })\n\n                if(jsonres['status'] === 'ongoing'){\n\n                    if(jsonres['current_question'] !== this.state.currentQuestion) {\n                        const url2 = this.baseURL + \"/get_question\"; \n\n                        const res2 = await fetch(url2)\n\n                        const jsonres2 = await res2.json()\n                        const md = document.getElementById(\"md\") \n                        md.src = jsonres2[\"md\"]\n                        // const audioEl = document.getElementsByClassName(\"audio-element\")[0]\n                        // const audioSrc = document.getElementById(\"audiosource\")\n                        // audioSrc.setAttribute(\"src\",jsonres2[\"audio\"])\n                        // audioEl.play()\n\n                        let audio = new Audio(jsonres2[\"audio\"])\n                        audio.play()\n\n                    }\n\n                    this.setState({\n                        status          : jsonres['status'],\n                        currentQuestion : jsonres['current_question'],\n                        question_status : jsonres['question_status'],\n                        reading_timer   : jsonres['reading_timer'],\n                        thinking_timer  : jsonres['thinking_timer'],\n                        waiting_timer   : jsonres['waiting_timer']\n                    })\n\n                }\n\n            }, 1000);\n        } catch(e) {\n            console.log(e)\n        }\n    }\n    render(){\n        if(this.state.status === 'not_started'){\n            return(\n                <PreGame/>\n            )\n        }\n        if(this.state.status === 'finished'){\n            return(\n                <PostGame/>\n            )\n        }\n\n        if(this.state.status === 'ongoing'){\n            return(\n                <div>\n                    <h1>{this.state.status}</h1>\n                    <h2>Question {this.state.currentQuestion}</h2>\n                    <div>\n                        <audio className=\"audio-element\">\n                            <source id=\"audiosource\" src=\"\"></source>\n                        </audio>\n                    </div>\n                    <h4>Material Distributiv</h4>\n                    <div>\n                        <img src=\"\" id=\"md\" style={{\n                            display: 'block',\n                            marginLeft: 'auto',\n                            marginRight: 'auto',\n                            width:'50%'\n                            }}/>\n                    </div>\n                    <div display={this.state.question_status === 'reading'}>\n                        READING: {this.state.reading_timer}\n                    </div>\n\n                    <div display={this.state.question_status === 'thinking'}>\n                        THINKING: {this.state.thinking_timer}\n                    </div>\n\n                    <div display={this.state.question_status === 'waiting_for_answers'}>\n                        GATHERING ANSWERS: {this.state.waiting_timer}\n                    </div>\n                </div> \n            )\n        }\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/game'\nimport PreGame from './components/pregame'\nimport PostGame from './components/postgame'\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}